{
	"competition-template": {
		"prefix": "cpp",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std ;",
			"",
			"#define pb(n) push_back(n)",
			"#define fi first",
			"#define se second",
			"#define all(r) begin(r),end(r)",
			"#define vmax(ary) *max_element(all(ary))",
			"#define vmin(ary) *min_element(all(ary))",
			"#define fcout(n) cout<<fixed<<setprecision((n))",
			"#define scout(n) cout<<setw(n)",
			"#define vary(type,name,size,init) vector< type> name(size,init)",
			"#define vvl(v,w,h,init) vector<vector<ll>> v(w,vector<ll>(h,init))",
			"#define mp(a,b) make_pair(a,b)",
			"",
			"#define rep(i,n) for(int i = 0; i < (int)(n);++i)",
			"#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)",
			"#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)",
			"#define repa(n,array) for(auto &n :(array))",
			"",
			"using ll = long long;",
			"using pii = pair<int,int> ;",
			"using pll = pair<ll,ll> ;",
			"const ll mod = 1e9+7;",
			"constexpr ll inf = ((1<<30)-1)*2+1 ;",
			"constexpr double PI = acos(-1.0) ;",
			"double eps = 1e-10 ;",
			"",
			"const int dy[] = {-1,0,1,0,1,-1,1,-1};",
			"const int dx[] = {0,-1,0,1,1,-1,-1,1};",
			"inline bool value(int x,int y,int w,int h){",
			"  return (x >= 0 && x < w && y >= 0 && y < h);",
			"}",
			"template<typename T>",
			"istream& operator >> (istream& is, vector<T>& vec){",
			"  for(T& x: vec) is >> x;",
			"  return is;",
			"}",
			"",
			"template<typename T>",
			"string join(vector<T>& vec, string sep = \" \"){",
			"  stringstream ss;",
			"  for(int i=0; i<vec.size(); i++){",
			"    ss << vec[i] << ( i+1 == vec.size() ? \"\" : sep );",
			"  }",
			"  return ss.str();",
			"}",
			"template<typename T>",
			"ostream& operator << (ostream& os, vector<T>& vec){",
			"  for(int i=0; i<vec.size(); i++){",
			"    os << vec[i] << ( i+1 == vec.size() ? \"\" : \" \" );",
			"  }",
			"  return os;",
			"}",
			"",
			"",
			"int main(){",
			"  cin.tie(0);",
			"  ios::sync_with_stdio(false);",
			"  $1",
			"  return 0;",
			"}"
		]
	},
	"rep short cut": {
		"prefix": "rep",
		"body": [
			"rep($1, $2){ ",
			"  $3",
			"}"
		]
	},
	"REP short cut": {
		"prefix": "REP",
		"body": [
			"REP($1, $2, $3){ ",
			"  $4",
			"}"
		]
	}
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}
